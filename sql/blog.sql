CREATE DATABASE `blog`

USE `blog`;

/*Table structure for table `role` */

DROP TABLE IF EXISTS `role`;

CREATE TABLE `role` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `ROLE_NAME` varchar(50) NOT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

/*Data for the table `role` */

insert  into `role`(`ID`,`ROLE_NAME`) values (1,'ADMIN'),(2,'AUTHOR'),(3,'USER');

/*Table structure for table `users` */

DROP TABLE IF EXISTS `users`;

CREATE TABLE `users` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `USERNAME` varchar(50) NOT NULL,
  `PASSWORD` varchar(100) NOT NULL,
  `EMAIL_ID` varchar(50) NOT NULL,
  `ROLE_ID` int(11) NOT NULL DEFAULT '3',
  `ACTIVATION_CODE` varchar(50) NOT NULL DEFAULT '0',
  `ACTIVATION` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`),
  UNIQUE KEY `UQ_USERNAME` (`USERNAME`),
  UNIQUE KEY `UQ_EMAIL_ID` (`EMAIL_ID`),
  KEY `FK_ROLE_ID` (`ROLE_ID`),
  CONSTRAINT `FK_ROLE_ID` FOREIGN KEY (`ROLE_ID`) REFERENCES `role` (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=58 DEFAULT CHARSET=utf8;
/*Table structure for table `articles` */

DROP TABLE IF EXISTS `articles`;

CREATE TABLE `articles` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `USER_ID` int(11) NOT NULL,
  `TITLE` varchar(50) NOT NULL,
  `CONTENT` text NOT NULL,
  `PUBLISHED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `MODIFIED_DATE` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `STATUS` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`),
  UNIQUE KEY `UQ_USER_TITLE` (`USER_ID`,`TITLE`),
  CONSTRAINT `FK_USER_ID` FOREIGN KEY (`USER_ID`) REFERENCES `users` (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `category` */

DROP TABLE IF EXISTS `category`;

CREATE TABLE `category` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `NAME` varchar(50) NOT NULL,
  `USER_ID` int(11) NOT NULL,
  PRIMARY KEY (`ID`),
  KEY `FK_USERS` (`USER_ID`),
  CONSTRAINT `FK_USERS` FOREIGN KEY (`USER_ID`) REFERENCES `users` (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `article_category` */

DROP TABLE IF EXISTS `article_category`;

CREATE TABLE `article_category` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `ARTICLE_ID` int(11) NOT NULL,
  `CATEGORY_ID` int(11) NOT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE KEY `UQ_ARTICLE_CATEGORY` (`ARTICLE_ID`,`CATEGORY_ID`),
  KEY `FK_CATEGORY_ID` (`CATEGORY_ID`),
  CONSTRAINT `FK_ARTICLE_ID` FOREIGN KEY (`ARTICLE_ID`) REFERENCES `articles` (`ID`),
  CONSTRAINT `FK_CATEGORY_ID` FOREIGN KEY (`CATEGORY_ID`) REFERENCES `category` (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `comments` */

DROP TABLE IF EXISTS `comments`;

CREATE TABLE `comments` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `ARTICLE_ID` int(11) NOT NULL,
  `USER_ID` int(11) NOT NULL,
  `COMMENT_TEXT` text NOT NULL,
  PRIMARY KEY (`ID`),
  KEY `FK_ARTICLE` (`ARTICLE_ID`),
  KEY `FK_USER` (`USER_ID`),
  CONSTRAINT `FK_ARTICLE` FOREIGN KEY (`ARTICLE_ID`) REFERENCES `articles` (`ID`),
  CONSTRAINT `FK_USER` FOREIGN KEY (`USER_ID`) REFERENCES `users` (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Table structure for table `ratings` */

DROP TABLE IF EXISTS `ratings`;

CREATE TABLE `ratings` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `ARTICLE_ID` int(11) NOT NULL,
  `USER_ID` int(11) NOT NULL,
  `RATING` int(11) NOT NULL DEFAULT '1',
  `LIKE` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`),
  UNIQUE KEY `UQ_ARTICLE_USER` (`ARTICLE_ID`,`USER_ID`),
  KEY `FK_USER_ARTICLE` (`USER_ID`),
  CONSTRAINT `FK_RATING_ARTICLE` FOREIGN KEY (`ARTICLE_ID`) REFERENCES `articles` (`ID`),
  CONSTRAINT `FK_USER_ARTICLE` FOREIGN KEY (`USER_ID`) REFERENCES `users` (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/* Function  structure for function  `FN_GET_ARTICLE_ID` */

DROP FUNCTION IF EXISTS `FN_GET_ARTICLE_ID` ;
DELIMITER $$

CREATE FUNCTION `FN_GET_ARTICLE_ID`(NAME VARCHAR(50),USER_ID_VAR INT) RETURNS int(11)
BEGIN
    DECLARE ID_VAR INT DEFAULT 0; 
SELECT ID INTO ID_VAR FROM ARTICLES WHERE TITLE=NAME AND USER_ID=USER_ID_VAR;
RETURN ID_VAR;
    END $$
DELIMITER ;

/* Function  structure for function  `FN_GET_CATEGORY_ID` */

DROP FUNCTION IF EXISTS `FN_GET_CATEGORY_ID` ;
DELIMITER $$

CREATE FUNCTION `FN_GET_CATEGORY_ID`(CATEGORY_VAR VARCHAR(50),USERID INT) RETURNS int(11)
BEGIN
    DECLARE CATEGORY_ID INT DEFAULT 0;
SELECT ID INTO CATEGORY_ID FROM CATEGORY WHERE NAME=CATEGORY_VAR AND USER_ID=USERID;
RETURN CATEGORY_ID;
    END $$
DELIMITER ;

/* Function  structure for function  `FN_GET_EMAIL_BY_ARTICLE` */

DROP FUNCTION IF EXISTS `FN_GET_EMAIL_BY_ARTICLE` ;
DELIMITER $$

CREATE FUNCTION `FN_GET_EMAIL_BY_ARTICLE`(article_id int) RETURNS varchar(50) CHARSET utf8
BEGIN
Declare email varchar(50);
SELECT email_id into email FROM articles JOIN users ON articles.`USER_ID`=users.`ID` where articles.`ID`=article_id;
return email;
    END $$
DELIMITER ;

/* Function  structure for function  `FN_GET_ROLE_ID` */

DROP FUNCTION IF EXISTS `FN_GET_ROLE_ID` ;
DELIMITER $$

CREATE FUNCTION `FN_GET_ROLE_ID`(name varchar(50)) RETURNS int(11)
BEGIN
    declare roleId int default 0;
select role_id into roleId from users where username=name;
return roleId;
    END $$
DELIMITER ;

/* Function  structure for function  `FN_GET_USER_ID` */

DROP FUNCTION IF EXISTS `FN_GET_USER_ID` ;
DELIMITER $$

CREATE FUNCTION `FN_GET_USER_ID`(NAME VARCHAR(50)) RETURNS int(11)
BEGIN
    DECLARE ID_VAR INT DEFAULT 0;
IF (FN_IS_VALID_USERNAME(NAME)) THEN
RETURN ID_VAR;
ELSE
SELECT ID INTO ID_VAR FROM USERS WHERE USERNAME=NAME;
RETURN ID_VAR;
END IF;
    END $$
DELIMITER ;

/* Function  structure for function  `FN_GET_USER_NAME` */

DROP FUNCTION IF EXISTS `FN_GET_USER_NAME` ;
DELIMITER $$

CREATE DEFINER=`root`@`localhost` FUNCTION `FN_GET_USER_NAME`(user_id int) RETURNS varchar(50) CHARSET utf8
BEGIN
declare user_name varchar(50);
select username into user_name from users where id=user_id;
return user_name;
    END $$
DELIMITER ;

/* Function  structure for function  `FN_IS_USER_ACTIVE` */

DROP FUNCTION IF EXISTS `FN_IS_USER_ACTIVE` ;
DELIMITER $$

CREATE FUNCTION `FN_IS_USER_ACTIVE`(name varchar(50)) RETURNS varchar(50) CHARSET utf8
BEGIN
declare is_active boolean default false;
if exists(select 1 from users where username=name and activation=1) then
set is_active=true;
end if;
return is_active;
    END $$
DELIMITER ;

/* Function  structure for function  `FN_IS_VALID_LOGIN` */

DROP FUNCTION IF EXISTS `FN_IS_VALID_LOGIN` ;
DELIMITER $$

CREATE FUNCTION `FN_IS_VALID_LOGIN`(USER_VAR varchar(50),pass varchar(100)) RETURNS tinyint(1)
BEGIN
    DECLARE IS_VALID BOOLEAN DEFAULT TRUE;
	if (FN_IS_VALID_USERNAME(USER_VAR)) THEN
	SET IS_VALID=FALSE;
	ELSE
		IF EXISTS(SELECT 1 FROM USERS WHERE USERNAME=USER_VAR AND PASSWORD=PASS) THEN
		SET IS_VALID=TRUE;
		ELSE	
		SET IS_VALID=FALSE;
		END IF;
	END IF;
	RETURN IS_VALID;
    END $$
DELIMITER ;

/* Function  structure for function  `FN_IS_VALID_PASSWORD` */

DROP FUNCTION IF EXISTS `FN_IS_VALID_PASSWORD` ;
DELIMITER $$

CREATE FUNCTION `FN_IS_VALID_PASSWORD`(PASS VARCHAR(50)) RETURNS tinyint(1)
BEGIN
declare IS_VALID BOOLEAN DEFAULT TRUE;
IF (TRIM(BOTH FROM PASS)="") THEN
SET IS_VALID=FALSE;
ELSEIF (LENGTH(TRIM(BOTH FROM PASS))<6) THEN
SET IS_VALID=FALSE;
END IF;
RETURN IS_VALID;
    END $$
DELIMITER ;

/* Function  structure for function  `FN_IS_VALID_USERNAME` */

DROP FUNCTION IF EXISTS `FN_IS_VALID_USERNAME` ;
DELIMITER $$

CREATE FUNCTION `FN_IS_VALID_USERNAME`(USER_NAME VARCHAR(50)) RETURNS tinyint(1)
BEGIN
DECLARE IS_VALID BOOLEAN default TRUE;
IF EXISTS(SELECT 1 FROM USERS WHERE USERNAME=USER_NAME) THEN
SET IS_VALID=FALSE;
ELSEIF (TRIM(BOTH FROM USER_NAME)="") THEN
SET IS_VALID=FALSE;
END IF;
RETURN IS_VALID;
    END $$
DELIMITER ;